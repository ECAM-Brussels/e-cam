generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Page {
  url String @id
  title String?
  description String?
  assignment Assignment?
}

model Assignment {
  url String @id
  /// [ExerciseList]
  body Json
  /// [Options]
  options Json?
  hash String?
  lastModified DateTime @default(now())
  video String?

  attempts Attempt[]
  page Page @relation(fields: [url], references: [url])
  courses Course[]
  prerequisites Assignment[] @relation("Prerequisites")
  requiredBy Assignment[] @relation("Prerequisites")
}

model Course {
  code String @id
  title String?
  image String?
  url String?
  ecam Boolean @default(false)

  assignments Assignment[]
}

model Question {
  hash String @id
  type String
  /// [Question]
  body Json
  score Int @default(1200)
  attempts Attempt[]
}

model User {
  email String @id
  firstName String
  lastName String
  role Role @default(STUDENT)
  score Int @default(1200)

  attempts Attempt[]
  strokes Stroke[]
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model Attempt {
  id String @id @default(uuid())
  url String
  email String
  position Int
  hash String
  /// [Exercise]
  exercise Json
  correct Boolean?
  gain Int?
  date DateTime @default(now())
  lastModified DateTime @default(now())

  assignment Assignment @relation(fields: [url], references: [url])
  user User @relation(fields: [email], references: [email])
  question Question @relation(fields: [hash], references: [hash])

  @@unique([url, email, position])
}

model Stroke {
  id String @id @default(uuid())
  url String
  ownerEmail String
  board String
  color String @default("#255994")
  lineWidth Int @default(2)
  /// [PointList]
  points Json
  created DateTime @default(now())

  owner User @relation(fields: [ownerEmail], references: [email])
}
